// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package com.microsoft.marketplace.saas;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.microsoft.marketplace.saas.models.FulfillmentOperationsDeleteSubscriptionResponse;
import com.microsoft.marketplace.saas.models.FulfillmentOperationsUpdateSubscriptionResponse;
import com.microsoft.marketplace.saas.models.ResolvedSubscription;
import com.microsoft.marketplace.saas.models.SubscriberPlan;
import com.microsoft.marketplace.saas.models.Subscription;
import com.microsoft.marketplace.saas.models.SubscriptionPlans;
import com.microsoft.marketplace.saas.models.SubscriptionsResponse;
import java.util.UUID;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in FulfillmentOperations. */
public final class FulfillmentOperations {
    /** The proxy service used to perform REST calls. */
    private final FulfillmentOperationsService service;

    /** The service client containing this operation class. */
    private final SaaSAPI client;

    /**
     * Initializes an instance of FulfillmentOperations.
     *
     * @param client the instance of the service client containing this operation class.
     */
    FulfillmentOperations(SaaSAPI client) {
        this.service = RestProxy.create(FulfillmentOperationsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for SaaSAPIFulfillmentOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SaaSAPIFulfillmentOp")
    private interface FulfillmentOperationsService {
        @Post("/saas/subscriptions/resolve")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<ResolvedSubscription>> resolve(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("x-ms-requestid") UUID requestId,
                @HeaderParam("x-ms-correlationid") UUID correlationId,
                @HeaderParam("x-ms-marketplace-token") String xMsMarketplaceToken);

        @Get("/saas/subscriptions/")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<SubscriptionsResponse>> listSubscriptions(
                @HostParam("$host") String host,
                @QueryParam("api-version") String apiVersion,
                @QueryParam("continuationToken") String continuationToken,
                @HeaderParam("x-ms-requestid") UUID requestId,
                @HeaderParam("x-ms-correlationid") UUID correlationId);

        @Get("/saas/subscriptions/{subscriptionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Subscription>> getSubscription(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") UUID subscriptionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("x-ms-requestid") UUID requestId,
                @HeaderParam("x-ms-correlationid") UUID correlationId);

        @Patch("/saas/subscriptions/{subscriptionId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<FulfillmentOperationsUpdateSubscriptionResponse> updateSubscription(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") UUID subscriptionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("x-ms-requestid") UUID requestId,
                @HeaderParam("x-ms-correlationid") UUID correlationId,
                @BodyParam("application/json") SubscriberPlan body);

        @Delete("/saas/subscriptions/{subscriptionId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<FulfillmentOperationsDeleteSubscriptionResponse> deleteSubscription(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") UUID subscriptionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("x-ms-requestid") UUID requestId,
                @HeaderParam("x-ms-correlationid") UUID correlationId);

        @Get("/saas/subscriptions/{subscriptionId}/listAvailablePlans")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<SubscriptionPlans>> listAvailablePlans(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") UUID subscriptionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("x-ms-requestid") UUID requestId,
                @HeaderParam("x-ms-correlationid") UUID correlationId);

        @Post("/saas/subscriptions/{subscriptionId}/activate")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> activateSubscription(
                @HostParam("$host") String host,
                @PathParam("subscriptionId") UUID subscriptionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("x-ms-requestid") UUID requestId,
                @HeaderParam("x-ms-correlationid") UUID correlationId,
                @BodyParam("application/json") SubscriberPlan body);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<SubscriptionsResponse>> listSubscriptionsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    /**
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The
     * resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website,
     * the URL contains a token in the query parameters. The partner is expected to use this token and make a request to
     * resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource.
     * This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's
     *     website from Azure (for example, https://contoso.com/signup?token=..). Note, The URL decodes the token value
     *     from the browser before using it.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summary of the subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ResolvedSubscription>> resolveWithResponseAsync(
            String xMsMarketplaceToken, UUID requestId, UUID correlationId) {
        return service.resolve(
                this.client.getHost(), this.client.getApiVersion(), requestId, correlationId, xMsMarketplaceToken);
    }

    /**
     * The resolve endpoint enables the publisher to resolve a marketplace token to a persistent resource ID. The
     * resource ID is the unique identifier for a SaaS subscription. When a user is redirected to a partner's website,
     * the URL contains a token in the query parameters. The partner is expected to use this token and make a request to
     * resolve it. The response contains the unique SaaS subscription ID, name, offer ID, and plan for the resource.
     * This token is valid for one hour only.
     *
     * @param xMsMarketplaceToken The token query parameter in the URL when the user is redirected to the SaaS partner's
     *     website from Azure (for example, https://contoso.com/signup?token=..). Note, The URL decodes the token value
     *     from the browser before using it.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return summary of the subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ResolvedSubscription> resolveAsync(String xMsMarketplaceToken, UUID requestId, UUID correlationId) {
        return resolveWithResponseAsync(xMsMarketplaceToken, requestId, correlationId)
                .flatMap(
                        (Response<ResolvedSubscription> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param continuationToken Optional value, only used for ListSubscriptions.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Subscription>> listSubscriptionsSinglePageAsync(
            String continuationToken, UUID requestId, UUID correlationId) {
        return service.listSubscriptions(
                        this.client.getHost(), this.client.getApiVersion(), continuationToken, requestId, correlationId)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getSubscriptions(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Lists all the SaaS subscriptions for a publisher.
     *
     * @param continuationToken Optional value, only used for ListSubscriptions.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<Subscription> listSubscriptionsAsync(
            String continuationToken, UUID requestId, UUID correlationId) {
        return new PagedFlux<>(
                () -> listSubscriptionsSinglePageAsync(continuationToken, requestId, correlationId),
                nextLink -> listSubscriptionsNextSinglePageAsync(nextLink));
    }

    /**
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified SaaS subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Subscription>> getSubscriptionWithResponseAsync(
            UUID subscriptionId, UUID requestId, UUID correlationId) {
        return service.getSubscription(
                this.client.getHost(), subscriptionId, this.client.getApiVersion(), requestId, correlationId);
    }

    /**
     * Gets the specified SaaS subscription. Use this call to get license information and plan information.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified SaaS subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Subscription> getSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId) {
        return getSubscriptionWithResponseAsync(subscriptionId, requestId, correlationId)
                .flatMap(
                        (Response<Subscription> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param body The body parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FulfillmentOperationsUpdateSubscriptionResponse> updateSubscriptionWithResponseAsync(
            UUID subscriptionId, SubscriberPlan body, UUID requestId, UUID correlationId) {
        return service.updateSubscription(
                this.client.getHost(), subscriptionId, this.client.getApiVersion(), requestId, correlationId, body);
    }

    /**
     * Use this call to update the plan, the user count (quantity), or both.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param body The body parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateSubscriptionAsync(
            UUID subscriptionId, SubscriberPlan body, UUID requestId, UUID correlationId) {
        return updateSubscriptionWithResponseAsync(subscriptionId, body, requestId, correlationId)
                .flatMap((FulfillmentOperationsUpdateSubscriptionResponse res) -> Mono.empty());
    }

    /**
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FulfillmentOperationsDeleteSubscriptionResponse> deleteSubscriptionWithResponseAsync(
            UUID subscriptionId, UUID requestId, UUID correlationId) {
        return service.deleteSubscription(
                this.client.getHost(), subscriptionId, this.client.getApiVersion(), requestId, correlationId);
    }

    /**
     * Unsubscribe and delete the specified subscription.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteSubscriptionAsync(UUID subscriptionId, UUID requestId, UUID correlationId) {
        return deleteSubscriptionWithResponseAsync(subscriptionId, requestId, correlationId)
                .flatMap((FulfillmentOperationsDeleteSubscriptionResponse res) -> Mono.empty());
    }

    /**
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<SubscriptionPlans>> listAvailablePlansWithResponseAsync(
            UUID subscriptionId, UUID requestId, UUID correlationId) {
        return service.listAvailablePlans(
                this.client.getHost(), subscriptionId, this.client.getApiVersion(), requestId, correlationId);
    }

    /**
     * Use this call to find out if there are any private or public offers for the current publisher.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SubscriptionPlans> listAvailablePlansAsync(UUID subscriptionId, UUID requestId, UUID correlationId) {
        return listAvailablePlansWithResponseAsync(subscriptionId, requestId, correlationId)
                .flatMap(
                        (Response<SubscriptionPlans> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Use this call to activate a subscription.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param body The body parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> activateSubscriptionWithResponseAsync(
            UUID subscriptionId, SubscriberPlan body, UUID requestId, UUID correlationId) {
        return service.activateSubscription(
                this.client.getHost(), subscriptionId, this.client.getApiVersion(), requestId, correlationId, body);
    }

    /**
     * Use this call to activate a subscription.
     *
     * @param subscriptionId The subscriptionId parameter.
     * @param body The body parameter.
     * @param requestId A unique string value for tracking the request from the client, preferably a GUID. If this value
     *     isn't provided, one will be generated and provided in the response headers.
     * @param correlationId A unique string value for operation on the client. This parameter correlates all events from
     *     client operation with events on the server side. If this value isn't provided, one will be generated and
     *     provided in the response headers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> activateSubscriptionAsync(
            UUID subscriptionId, SubscriberPlan body, UUID requestId, UUID correlationId) {
        return activateSubscriptionWithResponseAsync(subscriptionId, body, requestId, correlationId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<Subscription>> listSubscriptionsNextSinglePageAsync(String nextLink) {
        return service.listSubscriptionsNext(nextLink)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getSubscriptions(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
